/* 
 * I used http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm for finding geometry functions.
 * I also used https://www.shadertoy.com/view/4ssGzS for inspiration.
 * Made by Emil Sandst√∏
 */

#define MAX_RAYMARCH_ITER 256
#define MAX_RAYMARCH_ITER_SHADOWS 16
#define SOFT_SHADOWS_FACTOR 4.0
#define PI 3.14159265359

#define GROUND 1.0
#define SPHERE 2.0

const float precis = 0.001;

//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
// 

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
{ 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}

vec3 rotateX(in vec3 p, float a) {
	float c = cos(a); float s = sin(a);
	return vec3(p.x, c * p.y - s * p.z, s * p.y + c * p.z);
}

vec3 rotateY(vec3 p, float a) {
	float c = cos(a); float s = sin(a);
	return vec3(c * p.x + s * p.z, p.y, -s * p.x + c * p.z);
}

vec3 rotateZ(vec3 p, float a) {
	float c = cos(a); float s = sin(a);
	return vec3(c * p.x - s * p.y, s * p.x + c * p.y, p.z);
}

// Setup a rotation matrix from an arbitrary axis.
// Axis must be a unit vector.
mat3 setupRotate(vec3 axis, float theta)
{
	float s = sin(theta);
	float c = cos(theta);

	float a = 1.0 - c;
	float ax = a * axis.x;
	float ay = a * axis.y;
	float az = a * axis.z;

	return mat3(ax*axis.x + c, ax*axis.y + axis.z*s, ax*axis.z - axis.y*s,
				ay*axis.x - axis.z*s, ay*axis.y + c, ay*axis.z + axis.x*s,
				az*axis.x + axis.y*s, az*axis.y - axis.x*s, az*axis.z + c);
}

//Find the shortest distance from a point to a point in the sphere.
float sdSphere(vec3 p, float s)
{
	return length(p)-s;
}

//Find the shortest distance from a point to a point in a box.
float udBox(vec3 p, vec3 b)
{
  	return length(max(abs(p)-b,0.0));
}

vec3 rotateCamera(vec3 ray_start, vec3 ray_dir, vec3 cameraTarget) 
{
	ray_dir.x = -ray_dir.x; // Flip the x coordinate to match the scene data
	vec3 target = normalize(cameraTarget - ray_start);
	float angY = atan(target.z, target.x);
	ray_dir = rotateY(ray_dir, PI/2.0 - angY);
	float angX = atan(target.y, target.z);
	ray_dir = rotateX(ray_dir, -angX);
	return ray_dir;
}

vec3 moveCamera(vec3 ray_start) 
{
	ray_start += vec3(0.0, 0.5, -10.0);
	return ray_start;
}

mat3 transpose(mat3 m)
{
	return mat3(m[0][0], m[1][0], m[2][0],
				m[0][1], m[1][1], m[2][1],
				m[0][2], m[1][2], m[2][2]);
}

// Setup a matrix for inverse rotation and translation.
// The rotation happens first.
mat4 setupInvertRotTraMat(mat3 rotMat, vec3 t)
{	
	mat3 trasposeOfRot = transpose(rotMat);
	vec3 transformedTranslation = trasposeOfRot * t;
	 
	mat4 result = mat4(trasposeOfRot);
	result[3] = -vec4(transformedTranslation, -1.0);

	return result;
}

vec2 mapShadowCastingObjects(vec3 p, out vec3 finalP)
{
	//mat3 sphereRotMat = transpose(setupRotate(vec3(0.0, 1.0, 0.0), iGlobalTime * 0.5));
	//sphereRotMat *= transpose(setupRotate(vec3(1.0, 0.0, 0.0), iGlobalTime * 0.5));
	mat4 sphereMat = setupInvertRotTraMat(setupRotate(vec3(0.0, 1.0, 0.0), iGlobalTime * 0.5), 
										  vec3(0.0, 0.0, 0.0));
	
	finalP = vec3(sphereMat * vec4(p, 1.0));
	float dispFactor = 0.5 + pow(sin(iGlobalTime * 0.5), 2.0);
	float displacement = cos(dispFactor*finalP.x)*sin(dispFactor*finalP.y)*sin(dispFactor*finalP.z);
	vec2 sphere = vec2(SPHERE, sdSphere(finalP, 1.0));// + displacement);
	return sphere;
}

// Find the intersection points between the rays and objects in our scene, so that we can shade them.
// The x coordinate of the returned vector corresponds to the object type.
vec2 mapScene(vec3 p, out vec3 finalP)
{
	mat4 planeMat = setupInvertRotTraMat(setupRotate(vec3(1.0, 0.0, 0.0), PI), vec3(0.0, -1.0, 0.0));
	
	finalP = vec3(planeMat * vec4(p, 1.0));
	vec2 result = vec2(GROUND, udBox(finalP, vec3(50.0, 0.01, 50.0)));

	vec3 shadowCastingObjPos;
	vec2 shadowCastingObj = mapShadowCastingObjects(p, shadowCastingObjPos); 

	if(shadowCastingObj.y < result.y)
	{
		result = shadowCastingObj;
		finalP = shadowCastingObjPos;
	}

	return result;
}

//Code from iq.
vec3 calcNormal(vec3 pos)
{
    vec3 eps = vec3(precis,0.0,0.0);
    vec3 tmp;
    vec3 nor;
    nor.x = mapScene(pos+eps.xyy, tmp).y - mapScene(pos-eps.xyy, tmp).y;
    nor.y = mapScene(pos+eps.yxy, tmp).y - mapScene(pos-eps.yxy, tmp).y;
    nor.z = mapScene(pos+eps.yyx, tmp).y - mapScene(pos-eps.yyx, tmp).y;
    return normalize(nor);
}

// Returns the type of object hit.
float rayMarch(vec3 rayStart, vec3 rayDir, out float dist, out vec3 currentRayPos, out vec3 finalRayPos, out int iterations)
{
	dist = 0.0;
	vec2 mapDist;

	for(int i = 0;i < MAX_RAYMARCH_ITER;i++)
	{
		currentRayPos = rayStart + rayDir * dist;
		mapDist = mapScene(currentRayPos, finalRayPos);
		if(mapDist.y < precis)
		{
			iterations = i;
			return mapDist.x;
		}
		dist += mapDist.y;
	}

	return -1.;
}

// A variation of the implementation found here:
// https://www.shadertoy.com/view/4ssGzS
// Which is invented by Alex Evans(2006).
float ambientOcclusion(vec3 p, vec3 n) 
{
    float step = 8.;
    float ao = 0.;
    float dist;
    vec3 tmp;
    for (int i = 1; i <= 4; i++) {
        dist = step * float(i);
		ao += max(0., (dist - mapScene(p + n * dist, tmp).y) / dist);  
    }
    return 1. - ao * 0.1;
}

// A variation of the implementation found here:
// https://www.shadertoy.com/view/4ssGzS
bool raymarchToLight(vec3 ray_start, vec3 ray_dir, float maxDist, float maxY, out float dist, out vec3 p, out int iterations, out float light_intensity) 
{
    dist = 0.; 
    float minStep = 1.0;
    light_intensity = 1.0;
	float mapDist;
	vec3 tmp;
	for (int i = 1; i <= MAX_RAYMARCH_ITER_SHADOWS; i++) {
        p = ray_start + ray_dir * dist;
        mapDist = mapShadowCastingObjects(p, tmp).y;
        if (mapDist < precis) {
            iterations = i;
            return true;
        }
		light_intensity = min(light_intensity, SOFT_SHADOWS_FACTOR * mapDist / dist);
		dist += max(mapDist, minStep);
        if (dist >= maxDist || p.y > maxY) { break; }
    }
    return false;
}

void moveLight(inout vec3 lightPos)
{
	lightPos += vec3(cos(iGlobalTime), 0.0, sin(iGlobalTime)) * 2.0;
}

vec4 render(vec3 screen)
{	
	vec4 outColor = vec4(0.0, 0.0, 0.0, 1.0);
	vec4 diffColor = vec4(1.0, 1.0, 1.0, 1.0);
	vec3 rayOrigin = vec3(0.0, 0.0, -2.0);
	vec3 rayStart = moveCamera(rayOrigin);

	vec3 cameraTarget = vec3(0.0, 0.0, -1.0); 
	vec3 rayDir = rotateCamera(rayOrigin, normalize(screen - rayOrigin), cameraTarget);
	
	float dist;
	vec3 rayPos;
	vec3 finalRayPos;
	int iterations;
	float objectID = rayMarch(rayStart, rayDir, dist, rayPos, finalRayPos, iterations);

	if(objectID > 0.0)
	{
		vec3 normal = calcNormal(rayPos);
		normal.z = -normal.z;
		if(objectID == GROUND)
		{
			diffColor = texture2D(iChannel0, vec2(finalRayPos.x, finalRayPos.z) * 0.5) * (1.0 - rayPos.z / 30.0);
		}
		else if(objectID == SPHERE)
		{
			vec2 texCoord = vec2(sin(normal.x) / PI + 0.5, sin(normal.y) / PI + 0.5);
			vec3 normal = calcNormal(finalRayPos);
			
			float finalNoise;
			for(int i = 0;i < 32;i++)
			{
				float freq = pow(2.0, float(i));
				float amplitude = pow(0.7, float(i));

				finalNoise += snoise(normal * freq) * amplitude;
			}

			float colorNoise = finalNoise * 0.5 + 0.5;
			diffColor = vec4(colorNoise + 0.28, colorNoise * 0.478, colorNoise * 0.388, 1.0);
		}

		vec3 lightPos = vec3(3.0, 1.5, 0.0);
		moveLight(lightPos);

		vec3 lightDir = vec3(lightPos - finalRayPos);
		vec3 shadowPos = lightPos + vec3(0.0, 2.0, -1.0);
		vec3 shadowDir = normalize(shadowPos - finalRayPos);
		
		float intensity = max(dot(normal, normalize(lightDir)), 0.0);
		float lightLength = length(lightDir);
		float attenuation = 1.0 / (0.1 + 0.2 * lightLength + 0.4 * lightLength * lightLength);
		float ambientOcc = ambientOcclusion(rayPos, normal); 
		
		float dist; 
		vec3 op; 
		int iterations; 
		float l_intensity;
		float intensity2;
		normal.z = -normal.z;
		bool shadow = raymarchToLight(rayPos + normal * 0.1, shadowDir, lightLength, 400., dist, 
										op, iterations, l_intensity);
		bool shadow2 = raymarchToLight(rayPos + normal * 0.1, normalize(vec3(0.0, 0.5, -0.5)), 400., 400., dist, 
										op, iterations, intensity2);
		
		if(objectID != SPHERE)
		{
			if(shadow)
			{
				l_intensity = 0.0;
			}
			
			if(shadow2)
			{
				intensity2 = 0.0;
			}
		}

		l_intensity = min(l_intensity, intensity2);
		
		l_intensity = max(l_intensity, 0.25);

		// * l_intensity
		outColor += attenuation * (diffColor * intensity * l_intensity);
		outColor += diffColor * dot(normal, normalize(vec3(0.0, 0.5, -0.5))) * l_intensity * 0.8;
		outColor *= ambientOcc;
	}
	
	return outColor;
}

void main(void)
{
	vec2 uv = vec2((gl_FragCoord.x - iResolution.x *.5) / iResolution.y, (gl_FragCoord.y - iResolution.y *.5) / iResolution.y);
	gl_FragColor = render(vec3(uv, 0.0));
}